// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sudoku.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sudoku.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sudoku {
class SudokuRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SudokuRequest>
     _instance;
} _SudokuRequest_default_instance_;
class SudokuResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SudokuResponse>
     _instance;
} _SudokuResponse_default_instance_;

namespace protobuf_sudoku_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SudokuRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SudokuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SudokuRequest, checkerboard_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SudokuResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SudokuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SudokuResponse, solved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SudokuResponse, checkerboard_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(SudokuRequest)},
  { 7, 14, sizeof(SudokuResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SudokuRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SudokuResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sudoku.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SudokuRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SudokuRequest_default_instance_);_SudokuResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SudokuResponse_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014sudoku.proto\022\006sudoku\"%\n\rSudokuRequest\022"
      "\024\n\014checkerboard\030\001 \002(\t\"=\n\016SudokuResponse\022"
      "\025\n\006solved\030\001 \001(\010:\005false\022\024\n\014checkerboard\030\002"
      " \001(\t2G\n\rSudokuService\0226\n\005Solve\022\025.sudoku."
      "SudokuRequest\032\026.sudoku.SudokuResponseB\t\200"
      "\001\001\210\001\001\220\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sudoku.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sudoku_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SudokuRequest::kCheckerboardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SudokuRequest::SudokuRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sudoku_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sudoku.SudokuRequest)
}
SudokuRequest::SudokuRequest(const SudokuRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  checkerboard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_checkerboard()) {
    checkerboard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checkerboard_);
  }
  // @@protoc_insertion_point(copy_constructor:sudoku.SudokuRequest)
}

void SudokuRequest::SharedCtor() {
  _cached_size_ = 0;
  checkerboard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SudokuRequest::~SudokuRequest() {
  // @@protoc_insertion_point(destructor:sudoku.SudokuRequest)
  SharedDtor();
}

void SudokuRequest::SharedDtor() {
  checkerboard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SudokuRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SudokuRequest::descriptor() {
  protobuf_sudoku_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sudoku_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SudokuRequest& SudokuRequest::default_instance() {
  protobuf_sudoku_2eproto::InitDefaults();
  return *internal_default_instance();
}

SudokuRequest* SudokuRequest::New(::google::protobuf::Arena* arena) const {
  SudokuRequest* n = new SudokuRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SudokuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sudoku.SudokuRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_checkerboard()) {
    GOOGLE_DCHECK(!checkerboard_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*checkerboard_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SudokuRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sudoku.SudokuRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string checkerboard = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkerboard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->checkerboard().data(), static_cast<int>(this->checkerboard().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sudoku.SudokuRequest.checkerboard");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sudoku.SudokuRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sudoku.SudokuRequest)
  return false;
#undef DO_
}

void SudokuRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sudoku.SudokuRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string checkerboard = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checkerboard().data(), static_cast<int>(this->checkerboard().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sudoku.SudokuRequest.checkerboard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->checkerboard(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sudoku.SudokuRequest)
}

::google::protobuf::uint8* SudokuRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sudoku.SudokuRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string checkerboard = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checkerboard().data(), static_cast<int>(this->checkerboard().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sudoku.SudokuRequest.checkerboard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->checkerboard(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sudoku.SudokuRequest)
  return target;
}

size_t SudokuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sudoku.SudokuRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string checkerboard = 1;
  if (has_checkerboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->checkerboard());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SudokuRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sudoku.SudokuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SudokuRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SudokuRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sudoku.SudokuRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sudoku.SudokuRequest)
    MergeFrom(*source);
  }
}

void SudokuRequest::MergeFrom(const SudokuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sudoku.SudokuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_checkerboard()) {
    set_has_checkerboard();
    checkerboard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checkerboard_);
  }
}

void SudokuRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sudoku.SudokuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SudokuRequest::CopyFrom(const SudokuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sudoku.SudokuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SudokuRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SudokuRequest::Swap(SudokuRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SudokuRequest::InternalSwap(SudokuRequest* other) {
  using std::swap;
  checkerboard_.Swap(&other->checkerboard_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SudokuRequest::GetMetadata() const {
  protobuf_sudoku_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sudoku_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SudokuRequest

// required string checkerboard = 1;
bool SudokuRequest::has_checkerboard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SudokuRequest::set_has_checkerboard() {
  _has_bits_[0] |= 0x00000001u;
}
void SudokuRequest::clear_has_checkerboard() {
  _has_bits_[0] &= ~0x00000001u;
}
void SudokuRequest::clear_checkerboard() {
  checkerboard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_checkerboard();
}
const ::std::string& SudokuRequest::checkerboard() const {
  // @@protoc_insertion_point(field_get:sudoku.SudokuRequest.checkerboard)
  return checkerboard_.GetNoArena();
}
void SudokuRequest::set_checkerboard(const ::std::string& value) {
  set_has_checkerboard();
  checkerboard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sudoku.SudokuRequest.checkerboard)
}
#if LANG_CXX11
void SudokuRequest::set_checkerboard(::std::string&& value) {
  set_has_checkerboard();
  checkerboard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sudoku.SudokuRequest.checkerboard)
}
#endif
void SudokuRequest::set_checkerboard(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_checkerboard();
  checkerboard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sudoku.SudokuRequest.checkerboard)
}
void SudokuRequest::set_checkerboard(const char* value, size_t size) {
  set_has_checkerboard();
  checkerboard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sudoku.SudokuRequest.checkerboard)
}
::std::string* SudokuRequest::mutable_checkerboard() {
  set_has_checkerboard();
  // @@protoc_insertion_point(field_mutable:sudoku.SudokuRequest.checkerboard)
  return checkerboard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SudokuRequest::release_checkerboard() {
  // @@protoc_insertion_point(field_release:sudoku.SudokuRequest.checkerboard)
  clear_has_checkerboard();
  return checkerboard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SudokuRequest::set_allocated_checkerboard(::std::string* checkerboard) {
  if (checkerboard != NULL) {
    set_has_checkerboard();
  } else {
    clear_has_checkerboard();
  }
  checkerboard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkerboard);
  // @@protoc_insertion_point(field_set_allocated:sudoku.SudokuRequest.checkerboard)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SudokuResponse::kSolvedFieldNumber;
const int SudokuResponse::kCheckerboardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SudokuResponse::SudokuResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sudoku_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sudoku.SudokuResponse)
}
SudokuResponse::SudokuResponse(const SudokuResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  checkerboard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_checkerboard()) {
    checkerboard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checkerboard_);
  }
  solved_ = from.solved_;
  // @@protoc_insertion_point(copy_constructor:sudoku.SudokuResponse)
}

void SudokuResponse::SharedCtor() {
  _cached_size_ = 0;
  checkerboard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  solved_ = false;
}

SudokuResponse::~SudokuResponse() {
  // @@protoc_insertion_point(destructor:sudoku.SudokuResponse)
  SharedDtor();
}

void SudokuResponse::SharedDtor() {
  checkerboard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SudokuResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SudokuResponse::descriptor() {
  protobuf_sudoku_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sudoku_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SudokuResponse& SudokuResponse::default_instance() {
  protobuf_sudoku_2eproto::InitDefaults();
  return *internal_default_instance();
}

SudokuResponse* SudokuResponse::New(::google::protobuf::Arena* arena) const {
  SudokuResponse* n = new SudokuResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SudokuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sudoku.SudokuResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_checkerboard()) {
    GOOGLE_DCHECK(!checkerboard_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*checkerboard_.UnsafeRawStringPointer())->clear();
  }
  solved_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SudokuResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sudoku.SudokuResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool solved = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_solved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string checkerboard = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkerboard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->checkerboard().data(), static_cast<int>(this->checkerboard().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sudoku.SudokuResponse.checkerboard");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sudoku.SudokuResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sudoku.SudokuResponse)
  return false;
#undef DO_
}

void SudokuResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sudoku.SudokuResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool solved = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->solved(), output);
  }

  // optional string checkerboard = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checkerboard().data(), static_cast<int>(this->checkerboard().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sudoku.SudokuResponse.checkerboard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->checkerboard(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sudoku.SudokuResponse)
}

::google::protobuf::uint8* SudokuResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sudoku.SudokuResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool solved = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->solved(), target);
  }

  // optional string checkerboard = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checkerboard().data(), static_cast<int>(this->checkerboard().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sudoku.SudokuResponse.checkerboard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->checkerboard(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sudoku.SudokuResponse)
  return target;
}

size_t SudokuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sudoku.SudokuResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string checkerboard = 2;
    if (has_checkerboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checkerboard());
    }

    // optional bool solved = 1 [default = false];
    if (has_solved()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SudokuResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sudoku.SudokuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SudokuResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SudokuResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sudoku.SudokuResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sudoku.SudokuResponse)
    MergeFrom(*source);
  }
}

void SudokuResponse::MergeFrom(const SudokuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sudoku.SudokuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_checkerboard();
      checkerboard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checkerboard_);
    }
    if (cached_has_bits & 0x00000002u) {
      solved_ = from.solved_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SudokuResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sudoku.SudokuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SudokuResponse::CopyFrom(const SudokuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sudoku.SudokuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SudokuResponse::IsInitialized() const {
  return true;
}

void SudokuResponse::Swap(SudokuResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SudokuResponse::InternalSwap(SudokuResponse* other) {
  using std::swap;
  checkerboard_.Swap(&other->checkerboard_);
  swap(solved_, other->solved_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SudokuResponse::GetMetadata() const {
  protobuf_sudoku_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sudoku_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SudokuResponse

// optional bool solved = 1 [default = false];
bool SudokuResponse::has_solved() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SudokuResponse::set_has_solved() {
  _has_bits_[0] |= 0x00000002u;
}
void SudokuResponse::clear_has_solved() {
  _has_bits_[0] &= ~0x00000002u;
}
void SudokuResponse::clear_solved() {
  solved_ = false;
  clear_has_solved();
}
bool SudokuResponse::solved() const {
  // @@protoc_insertion_point(field_get:sudoku.SudokuResponse.solved)
  return solved_;
}
void SudokuResponse::set_solved(bool value) {
  set_has_solved();
  solved_ = value;
  // @@protoc_insertion_point(field_set:sudoku.SudokuResponse.solved)
}

// optional string checkerboard = 2;
bool SudokuResponse::has_checkerboard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SudokuResponse::set_has_checkerboard() {
  _has_bits_[0] |= 0x00000001u;
}
void SudokuResponse::clear_has_checkerboard() {
  _has_bits_[0] &= ~0x00000001u;
}
void SudokuResponse::clear_checkerboard() {
  checkerboard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_checkerboard();
}
const ::std::string& SudokuResponse::checkerboard() const {
  // @@protoc_insertion_point(field_get:sudoku.SudokuResponse.checkerboard)
  return checkerboard_.GetNoArena();
}
void SudokuResponse::set_checkerboard(const ::std::string& value) {
  set_has_checkerboard();
  checkerboard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sudoku.SudokuResponse.checkerboard)
}
#if LANG_CXX11
void SudokuResponse::set_checkerboard(::std::string&& value) {
  set_has_checkerboard();
  checkerboard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sudoku.SudokuResponse.checkerboard)
}
#endif
void SudokuResponse::set_checkerboard(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_checkerboard();
  checkerboard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sudoku.SudokuResponse.checkerboard)
}
void SudokuResponse::set_checkerboard(const char* value, size_t size) {
  set_has_checkerboard();
  checkerboard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sudoku.SudokuResponse.checkerboard)
}
::std::string* SudokuResponse::mutable_checkerboard() {
  set_has_checkerboard();
  // @@protoc_insertion_point(field_mutable:sudoku.SudokuResponse.checkerboard)
  return checkerboard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SudokuResponse::release_checkerboard() {
  // @@protoc_insertion_point(field_release:sudoku.SudokuResponse.checkerboard)
  clear_has_checkerboard();
  return checkerboard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SudokuResponse::set_allocated_checkerboard(::std::string* checkerboard) {
  if (checkerboard != NULL) {
    set_has_checkerboard();
  } else {
    clear_has_checkerboard();
  }
  checkerboard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkerboard);
  // @@protoc_insertion_point(field_set_allocated:sudoku.SudokuResponse.checkerboard)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SudokuService::~SudokuService() {}

const ::google::protobuf::ServiceDescriptor* SudokuService::descriptor() {
  protobuf_sudoku_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sudoku_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* SudokuService::GetDescriptor() {
  return descriptor();
}

void SudokuService::Solve(::google::protobuf::RpcController* controller,
                         const ::sudoku::SudokuRequest*,
                         ::sudoku::SudokuResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Solve() not implemented.");
  done->Run();
}

void SudokuService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_sudoku_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      Solve(controller,
             ::google::protobuf::down_cast<const ::sudoku::SudokuRequest*>(request),
             ::google::protobuf::down_cast< ::sudoku::SudokuResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SudokuService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sudoku::SudokuRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& SudokuService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sudoku::SudokuResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SudokuService_Stub::SudokuService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SudokuService_Stub::SudokuService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SudokuService_Stub::~SudokuService_Stub() {
  if (owns_channel_) delete channel_;
}

void SudokuService_Stub::Solve(::google::protobuf::RpcController* controller,
                              const ::sudoku::SudokuRequest* request,
                              ::sudoku::SudokuResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace sudoku

// @@protoc_insertion_point(global_scope)
