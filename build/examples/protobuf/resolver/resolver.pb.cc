// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resolver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "resolver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace resolver {
class ResolveRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResolveRequest>
     _instance;
} _ResolveRequest_default_instance_;
class ResolveResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResolveResponse>
     _instance;
} _ResolveResponse_default_instance_;

namespace protobuf_resolver_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveRequest, address_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveResponse, resolved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveResponse, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveResponse, port_),
  0,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(ResolveRequest)},
  { 7, 15, sizeof(ResolveResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResolveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResolveResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "resolver.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ResolveRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResolveRequest_default_instance_);_ResolveResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResolveResponse_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016resolver.proto\022\010resolver\"!\n\016ResolveReq"
      "uest\022\017\n\007address\030\001 \002(\t\"D\n\017ResolveResponse"
      "\022\027\n\010resolved\030\001 \001(\010:\005false\022\n\n\002ip\030\002 \003(\007\022\014\n"
      "\004port\030\003 \003(\0052Q\n\017ResolverService\022>\n\007Resolv"
      "e\022\030.resolver.ResolveRequest\032\031.resolver.R"
      "esolveResponseB\t\200\001\001\210\001\001\220\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "resolver.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_resolver_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResolveRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResolveRequest::ResolveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resolver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:resolver.ResolveRequest)
}
ResolveRequest::ResolveRequest(const ResolveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:resolver.ResolveRequest)
}

void ResolveRequest::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResolveRequest::~ResolveRequest() {
  // @@protoc_insertion_point(destructor:resolver.ResolveRequest)
  SharedDtor();
}

void ResolveRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResolveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolveRequest::descriptor() {
  protobuf_resolver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resolver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResolveRequest& ResolveRequest::default_instance() {
  protobuf_resolver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResolveRequest* ResolveRequest::New(::google::protobuf::Arena* arena) const {
  ResolveRequest* n = new ResolveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResolveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:resolver.ResolveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_address()) {
    GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*address_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResolveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:resolver.ResolveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resolver.ResolveRequest.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:resolver.ResolveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:resolver.ResolveRequest)
  return false;
#undef DO_
}

void ResolveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:resolver.ResolveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resolver.ResolveRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:resolver.ResolveRequest)
}

::google::protobuf::uint8* ResolveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:resolver.ResolveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resolver.ResolveRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resolver.ResolveRequest)
  return target;
}

size_t ResolveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resolver.ResolveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string address = 1;
  if (has_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resolver.ResolveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResolveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resolver.ResolveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resolver.ResolveRequest)
    MergeFrom(*source);
  }
}

void ResolveRequest::MergeFrom(const ResolveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resolver.ResolveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    set_has_address();
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void ResolveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resolver.ResolveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveRequest::CopyFrom(const ResolveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resolver.ResolveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResolveRequest::Swap(ResolveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResolveRequest::InternalSwap(ResolveRequest* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResolveRequest::GetMetadata() const {
  protobuf_resolver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resolver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResolveRequest

// required string address = 1;
bool ResolveRequest::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResolveRequest::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void ResolveRequest::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResolveRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& ResolveRequest::address() const {
  // @@protoc_insertion_point(field_get:resolver.ResolveRequest.address)
  return address_.GetNoArena();
}
void ResolveRequest::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resolver.ResolveRequest.address)
}
#if LANG_CXX11
void ResolveRequest::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resolver.ResolveRequest.address)
}
#endif
void ResolveRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resolver.ResolveRequest.address)
}
void ResolveRequest::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resolver.ResolveRequest.address)
}
::std::string* ResolveRequest::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:resolver.ResolveRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResolveRequest::release_address() {
  // @@protoc_insertion_point(field_release:resolver.ResolveRequest.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResolveRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:resolver.ResolveRequest.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResolveResponse::kResolvedFieldNumber;
const int ResolveResponse::kIpFieldNumber;
const int ResolveResponse::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResolveResponse::ResolveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resolver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:resolver.ResolveResponse)
}
ResolveResponse::ResolveResponse(const ResolveResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ip_(from.ip_),
      port_(from.port_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resolved_ = from.resolved_;
  // @@protoc_insertion_point(copy_constructor:resolver.ResolveResponse)
}

void ResolveResponse::SharedCtor() {
  _cached_size_ = 0;
  resolved_ = false;
}

ResolveResponse::~ResolveResponse() {
  // @@protoc_insertion_point(destructor:resolver.ResolveResponse)
  SharedDtor();
}

void ResolveResponse::SharedDtor() {
}

void ResolveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolveResponse::descriptor() {
  protobuf_resolver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resolver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResolveResponse& ResolveResponse::default_instance() {
  protobuf_resolver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResolveResponse* ResolveResponse::New(::google::protobuf::Arena* arena) const {
  ResolveResponse* n = new ResolveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResolveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:resolver.ResolveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.Clear();
  port_.Clear();
  resolved_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResolveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:resolver.ResolveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool resolved = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_resolved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resolved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21u, input, this->mutable_ip())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ip())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_port())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_port())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:resolver.ResolveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:resolver.ResolveResponse)
  return false;
#undef DO_
}

void ResolveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:resolver.ResolveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool resolved = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->resolved(), output);
  }

  // repeated fixed32 ip = 2;
  for (int i = 0, n = this->ip_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->ip(i), output);
  }

  // repeated int32 port = 3;
  for (int i = 0, n = this->port_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->port(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:resolver.ResolveResponse)
}

::google::protobuf::uint8* ResolveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:resolver.ResolveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool resolved = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->resolved(), target);
  }

  // repeated fixed32 ip = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(2, this->ip_, target);

  // repeated int32 port = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->port_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resolver.ResolveResponse)
  return target;
}

size_t ResolveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resolver.ResolveResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed32 ip = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ip_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ip_size());
    total_size += data_size;
  }

  // repeated int32 port = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->port_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->port_size());
    total_size += data_size;
  }

  // optional bool resolved = 1 [default = false];
  if (has_resolved()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resolver.ResolveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolveResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResolveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resolver.ResolveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resolver.ResolveResponse)
    MergeFrom(*source);
  }
}

void ResolveResponse::MergeFrom(const ResolveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resolver.ResolveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ip_.MergeFrom(from.ip_);
  port_.MergeFrom(from.port_);
  if (from.has_resolved()) {
    set_resolved(from.resolved());
  }
}

void ResolveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resolver.ResolveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveResponse::CopyFrom(const ResolveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resolver.ResolveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveResponse::IsInitialized() const {
  return true;
}

void ResolveResponse::Swap(ResolveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResolveResponse::InternalSwap(ResolveResponse* other) {
  using std::swap;
  ip_.InternalSwap(&other->ip_);
  port_.InternalSwap(&other->port_);
  swap(resolved_, other->resolved_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResolveResponse::GetMetadata() const {
  protobuf_resolver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resolver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResolveResponse

// optional bool resolved = 1 [default = false];
bool ResolveResponse::has_resolved() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResolveResponse::set_has_resolved() {
  _has_bits_[0] |= 0x00000001u;
}
void ResolveResponse::clear_has_resolved() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResolveResponse::clear_resolved() {
  resolved_ = false;
  clear_has_resolved();
}
bool ResolveResponse::resolved() const {
  // @@protoc_insertion_point(field_get:resolver.ResolveResponse.resolved)
  return resolved_;
}
void ResolveResponse::set_resolved(bool value) {
  set_has_resolved();
  resolved_ = value;
  // @@protoc_insertion_point(field_set:resolver.ResolveResponse.resolved)
}

// repeated fixed32 ip = 2;
int ResolveResponse::ip_size() const {
  return ip_.size();
}
void ResolveResponse::clear_ip() {
  ip_.Clear();
}
::google::protobuf::uint32 ResolveResponse::ip(int index) const {
  // @@protoc_insertion_point(field_get:resolver.ResolveResponse.ip)
  return ip_.Get(index);
}
void ResolveResponse::set_ip(int index, ::google::protobuf::uint32 value) {
  ip_.Set(index, value);
  // @@protoc_insertion_point(field_set:resolver.ResolveResponse.ip)
}
void ResolveResponse::add_ip(::google::protobuf::uint32 value) {
  ip_.Add(value);
  // @@protoc_insertion_point(field_add:resolver.ResolveResponse.ip)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ResolveResponse::ip() const {
  // @@protoc_insertion_point(field_list:resolver.ResolveResponse.ip)
  return ip_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ResolveResponse::mutable_ip() {
  // @@protoc_insertion_point(field_mutable_list:resolver.ResolveResponse.ip)
  return &ip_;
}

// repeated int32 port = 3;
int ResolveResponse::port_size() const {
  return port_.size();
}
void ResolveResponse::clear_port() {
  port_.Clear();
}
::google::protobuf::int32 ResolveResponse::port(int index) const {
  // @@protoc_insertion_point(field_get:resolver.ResolveResponse.port)
  return port_.Get(index);
}
void ResolveResponse::set_port(int index, ::google::protobuf::int32 value) {
  port_.Set(index, value);
  // @@protoc_insertion_point(field_set:resolver.ResolveResponse.port)
}
void ResolveResponse::add_port(::google::protobuf::int32 value) {
  port_.Add(value);
  // @@protoc_insertion_point(field_add:resolver.ResolveResponse.port)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ResolveResponse::port() const {
  // @@protoc_insertion_point(field_list:resolver.ResolveResponse.port)
  return port_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ResolveResponse::mutable_port() {
  // @@protoc_insertion_point(field_mutable_list:resolver.ResolveResponse.port)
  return &port_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ResolverService::~ResolverService() {}

const ::google::protobuf::ServiceDescriptor* ResolverService::descriptor() {
  protobuf_resolver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resolver_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* ResolverService::GetDescriptor() {
  return descriptor();
}

void ResolverService::Resolve(::google::protobuf::RpcController* controller,
                         const ::resolver::ResolveRequest*,
                         ::resolver::ResolveResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Resolve() not implemented.");
  done->Run();
}

void ResolverService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_resolver_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      Resolve(controller,
             ::google::protobuf::down_cast<const ::resolver::ResolveRequest*>(request),
             ::google::protobuf::down_cast< ::resolver::ResolveResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ResolverService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::resolver::ResolveRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ResolverService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::resolver::ResolveResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ResolverService_Stub::ResolverService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ResolverService_Stub::ResolverService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ResolverService_Stub::~ResolverService_Stub() {
  if (owns_channel_) delete channel_;
}

void ResolverService_Stub::Resolve(::google::protobuf::RpcController* controller,
                              const ::resolver::ResolveRequest* request,
                              ::resolver::ResolveResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace resolver

// @@protoc_insertion_point(global_scope)
